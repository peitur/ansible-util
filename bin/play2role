#!/usr/bin/python3

import re, sys, os, getopt


import AnsibleUtils.util
import AnsibleUtils.admin
import AnsibleUtils.context
import AnsibleUtils.io 
import AnsibleUtils.ioformat

from pprint import pprint




########################################################################

## Each directory will get a main.yml file
SUBTASKS = {
	'init':{
		'options':{
				'd,debug' :"Print debug information",
				'n,nomain':"Do not create main.yml files",
				's,silent':"No extra output",
				'j,json'  :"Only create json files",
				'y,yaml'  :"Only create yaml files (default)"
			},
		'description':"Initialize a role"
	},
	'append':{
		'options':{
				'd,debug':"Print debug information",
				'n,nomain':"Do not create main.yml files",
				's,silent':"No extra output",
				'p,playbook':"Playbook to merge into main role",
				'r,role':"Role to merge into main role",
				'o,overwrite':"Overwrite already existing file",
				't,template':"Include template files"
			},
		'description':"Append a playbook or role onto a preexistsing role"
	}
}

DIRECTORIES = ['defaults','vars','files','templates','tasks','handlers','meta']
DEFAULT_FILE = "main"
JSON_ENDING = ".json"
YAML_ENDING = ".yml"
TMPL_ENDING = ".j2"


debug = False
########################################################################
## Functions
########################################################################



def iterate_project( project, options ):

	## Iterate through all project directories (project == role).
	## Return a list of all files in it.
	## Only scans registered directories
	## Returns full path, will loose track of files otherwise 

	debug = False

	if 'debug' in options: debug = options['debug']

	reply = []

	for d in DIRECTORIES:

		dirpath = project+"/"+d
		if not os.path.exists( dirpath ): raise RuntimeError("Incomplete project: "+project+" missing "+d )

		for f in os.listdir( project+"/"+d ):
			filepath = dirpath+"/"+f
			reply.append( filepath )

			if debug: print("DEBUG[IterateAppend]: %(app)s" % { 'app': filepath  } )


	if debug: print("DEBUG[IterateResult]: %(num)d" % { 'num': len(reply) } )

	return reply


def filter_profile( inlist, options ):
	## Filter the list for pattern
	## 

	debug = False
	inc_json = None
	inc_yaml = None
	inc_templates = None

	if 'debug' in options: debug = options['debug']

	if 'json' in options: inc_json = options['json']
	if 'yaml' in options: inc_yaml = options['yaml']
	if 'templates' in options: inc_templates = options['templates']

	if( debug ): print("DEBUG[Filter]: S:%(insize)d J:%(json)s Y:%(yaml)s T:%(templ)s " % { 'insize': len( inlist ),'json': inc_json,'yaml': inc_yaml,'templ':inc_templates} )

	reply = []
	for f in inlist:
		if( inc_json and is_json( f )  ): reply.append( f )
		if( inc_yaml and is_yaml( f )  ): reply.append( f )
		if( inc_templates and is_template( f )  ): reply.append( f )


	return reply


def convert_json2yaml( ):
	pass

def convert_yaml2json( ):
	pass



def split_playbook( filename, options ):

	data = None
	debug = None
	complete = None

	if 'debug' in options: debug = options['debug']
	if 'complete' in options: complete = options['complete']

	if( is_yaml( filename ) ):
		data= load_yaml( filename, options )

	if( is_json( filename ) ):
		data = load_json( filename, options )

	result = {}
	result['playbook'] = {}
	for d in data:
		for k in d.keys():

			if( k in DIRECTORIES ):
				result[k] = d[k]
			else:
				result['playbook'][ k ] = d[k]

	if complete :
		for d in DIRECTORIES:
			if( d not in result ):
				result[d] = []

	return result


def merge_role( rolename, options ):
	pass

def create_dirs( project, options ):

	nomain = None
	silent = None
	with_yaml = None
	with_json = None

	if 'debug' in options: debug = options['debug']

	if 'nomain' in options: nomain = options['nomain']
	if 'silent' in options: silent = options['silent']
	if 'json' in options: with_json = options['json']
	if 'yaml' in options: with_yaml = options['yaml']


	if debug: print( "DEBUG[CreateDir]:P: %(project)s M: %(nomain)s S: %(silent)s J:%(json)s Y:%(yaml)s" % { 'project': project, 'nomain': nomain, 'silent': silent, 'json': with_json ,'yaml':with_yaml  } )

	response = []
	try:

		for p in DIRECTORIES:
			path = project+"/"+p
			jsonfilename = path+"/"+DEFAULT_FILE+JSON_ENDING
			yamlfilename = path+"/"+DEFAULT_FILE+YAML_ENDING

			if( not os.path.exists( path ) ):
				if not silent or debug: print("Creating directory: %(path)s" % {'path':path} )
				os.makedirs( path )
				response.append( path )

			if( with_json and not os.path.exists( jsonfilename ) and not nomain ): 
				if not silent or debug: print("Creating JSON skeleton file: %(fname)s" % {'fname':jsonfilename} )
				
				#open( jsonfilename, "w" ).close()
				write_file( jsonfilename, "", {'debug':debug, 'overwrite':False})
				response.append( jsonfilename )

			if( with_yaml and not os.path.exists( yamlfilename ) and not nomain ): 
				if not silent or debug: print("Creating YAML skeleton file: %(fname)s" % {'fname':yamlfilename} )

				#open( yamlfilename, "w" ).close()
				write_file( yamlfilename, "", {'debug':debug, 'overwrite':False})

				response.append( yamlfilename )



		return response

	except:
		raise

	return response

###########################################################################
def handle_init( project, argv = [] ):

	try:
		optlist, args = getopt.getopt( argv, "dmsjy", ['debug','nomain','silent','json','yaml'])
	except getopt.GetoptError as err:
		print("Options: %(error)s" % { 'error': err.__str__() } )
		sys.exit(1)

	with_json = False
	with_yaml = False
	nomain = False
	silent = False
	debug = False

	for opt,arg in optlist:
		if( opt   in ("-d","--debug" ) ): debug = True
		elif( opt in ("-m","--nomain" ) ): nomain = True
		elif( opt in ("-s","--silent" ) ): silent = True
		elif( opt in ("-j","--json" ) ): with_json = True
		elif( opt in ("-y","--yaml" ) ): with_yaml = True
		
	if not silent or debug: print("Trying Initializing %(project)s" % {'project': project })

	elements = create_dirs( project, { 'silent': silent , 'nomain': nomain, 'json': with_json, 'yaml': with_yaml, 'debug': debug } )

	if not silent or debug: print("Created %(obj)s" % {'obj': len( elements ) })


def handle_append( project, argv ):

	try:
		optlist, args = getopt.getopt( argv, "dspno:r:", ['debug','silent','playbook=','role=','overwrite','nomain'])
	except getopt.GetoptError as err:
		print("Options: %(error)s" % { 'error': err.__str__() } )
		sys.exit(1)

	overwrite = True
	silent = False
	debug = False
	playbook = None
	role = None
	nomain = False

	for opt,arg in optlist:
		if( opt   in ("-d","--debug" ) ): debug = True
		elif( opt in ("-s","--silent" ) ): silent = True
		elif( opt in ("-o","--overwrite" ) ): overwrite = True
		elif( opt in ("-p","--playbook") ): playbook = arg
		elif( opt in ("-r","--role") ): role = arg
		elif( opt in ("-n","--nomain") ): nomain = True

	print("DEBUG: D:%(debug)s S:%(silent)s P:%(playbook)s R:%(role)s M:%(main)s" % { 'main': nomain,'debug': debug, 'silent': silent, 'playbook': playbook, 'role': role } )		

	if( playbook ):

		if not silent or debug: print("Trying appending playbook %(inf)s to %(project)s" % { 'inf': playbook,'project': project })
		dsplit = split_playbook( playbook, { 'debug': debug })
		if 'playbook' in dsplit:
			dsplit['playbook']['roles'] = [project]


		for d in DIRECTORIES:
			if d in dsplit:

				playbook_plist = re.split(r"\/", playbook )
				playbook_name = playbook_plist[-1]
				playbook_list = re.split( r"\.", playbook_name )

				if( nomain ):
					filename = project+"/"+d+"/"+playbook_list[0]+".yml"
				else:
					filename = project+"/"+d+"/main.yml"

				print("DEBUG[DsplitIter]: Dir:%(d)s F:%(f)s" % { 'd': d, 'f':filename } )
				write_file( filename, dsplit[d], {'debug':debug, 'overwrite':overwrite, 'main':True} )

		

	elif( role ):
		if not silent or debug: print("Trying appending role %(inf)s to %(project)s" % { 'inf': role,'project': project })

	else:
		print("ERROR: Unknown input: must be a playbook or role")



	pass





def handle_convert( srcproject, argv ):
	## convert 

	trgproject = argv.pop(0)

	try:
		optlist, args = getopt.getopt( argv, "dsf:t:", ['debug','silent','from','to'])
	except getopt.GetoptError as err:
		print("Options: %(error)s" % { 'error': err.__str__() } )
		sys.exit(1)

	overwrite = True
	silent = False
	debug = False

	from_format = "json"
	to_format = "yaml"



	if not silent or debug: print("Trying to convert %(project)s to %(trgproject)s" % {'project': srcproject, 'trgproject': trgproject })

	for opt,arg in optlist:
		if( opt   in ("-d","--debug" ) ): debug = True
		elif( opt in ("-s","--silent" ) ): silent = True
		elif( opt in ("-f","--from" ) ): from_format = arg
		elif( opt in ("-t","--to" ) ): to_format = arg




#
#	jsonfiles = filter_profile( iterate_project( project, { 'debug': debug } ), { 'debug': debug } )
#
#	if not silent or debug: print("Converted %(obj)s" % {'obj': len( jsonfiles ) })
#
	print("INFO: This feature is not yet implemented. Please use ")
	print("play2role init <rolename>")
	print("play2role append <rolename> --playbook <playbook>")



def handle_json2yaml( project, argv ):
	try:
		optlist, args = getopt.getopt( argv, "ds", ['debug','silent'])
	except getopt.GetoptError as err:
		print("Options: %(error)s" % { 'error': err.__str__() } )
		sys.exit(1)

	overwrite = True
	silent = False
	debug = False

	for opt,arg in optlist:
		if( opt   in ("-d","--debug" ) ): debug = True


	jsonfiles = filter_profile( iterate_project( project, { 'debug': debug } ), { 'debug': debug, 'json':True } )


	pass

def print_task_help( script, task ):

	info = SUBTASKS[task]

	print("Information for %(task)s" % { 'task':task } )
	print("Description: %(desc)s " % {'desc': info['description'] } )
	print("Options are:")
	for opt in info['options']:
		optl = re.split( ",", opt )
		opt_desc = info['options'][opt]
		
		print( "\t -%(sopt)-3s --%(lopt)-15s %(desc)-32s" % {'sopt': opt[0], 'lopt': optl[1], 'desc': opt_desc } )




def print_help( script, task = None ):
	print("")
	print("%(script)s <task> [options]" % { 'script': script } )
	print("Small tool to go from ansible playbooks to roles")
	print("")
	task_list = SUBTASKS.keys()
	if( not task or task not in task_list ):
		print("Supported tasks: %(tasks)s" % { 'tasks': str.join( "," , task_list ) } )
		print("%(script)s help <task> " % { 'script':script } )
		sys.exit(0)



	if( task ):
		print("")
		print_task_help( script, task )			



########################################################################
### Main 
########################################################################
## subcommand
scommand = None
project = None
script = None

#print(">>>> %(argv)s" % {'argv': sys.argv })

try:
	script = sys.argv.pop(0)
	scommand = sys.argv.pop(0)
	if( len( sys.argv ) > 0 ):
		project = sys.argv.pop(0)

except Exception as error:
	print("ERROR: %(error)s " % {'error':error } )
	print_help( script, project )
	sys.exit(0)


if( scommand == "help" ):
	
	print_help( script, project )
	sys.exit(0)

elif( scommand == 'init' and project != None ):
	
	handle_init( project, sys.argv )

elif( scommand == 'extract' and project != None ):
	pass
elif( scommand == 'append' and project != None ):

	handle_append( project, sys.argv )
	
elif( scommand == 'convert' and project != None ):
	
	handle_convert( project, sys.argv )

elif( scommand == 'j2y' and project != None ):
	pass
else:
	print("ERROR: Unknown subcommand %(cmd)s" % {'cmd': scommand } )
	print_help( script )
	sys.exit(0)



